+class Matrix()
	+var data: [][]float
	var maxlen: int
	+func new(mem: [][]float)
		var len: int :: ^mem[0]
		do me.maxlen :: 1
		for i(0, ^mem - 1)
			if(^mem[i] <> len)
				do dbg@print("行列になっていません。")
				throw 0x00000001
			end if
		end for
		do me.data :: mem
	end func
	;単位行列
	+func newId(I: int)
		do me.data :: #[I, I]float
		for i(0, I - 1)
			for j(0, I - 1)
				if(i = j)
					do me.data[i][j] :: 1.0
				end if
			end for
		end for
	end func
	+func trans(): @Matrix
		var transM: [][]float :: #[^me.data[0], ^me.data]float
		for i(0, ^transM - 1)
			for j(0, ^transM[0] - 1)
				do transM[i][j] :: me.data[j][i]
			end for
		end for
		var transverse: @Matrix :: #@Matrix
		do transverse.new(transM)
		ret transverse
	end func
	+func shape(): []int
		ret[^me.data, ^me.data[0]]
	end func
	+*func toStr(): []char
		var c: []char :: "|"
		for i(0, ^me.data - 1)
			for j(0, ^me.data[0] - 1)
				do me.maxlen :: (^me.data[i][j].toStr()) > me.maxlen ?(^me.data[i][j].toStr(), me.maxlen)
			end for
		end for
		for i(0, ^me.data - 1)
			for j(0, ^me.data[0] - 1)
				for(0, me.maxlen - ^me.data[i][j].toStr())
					do c :~ " "
				end for
				do c :~ me.data[i][j].toStr() ~ (j = ^me.data[0] - 1 ?("|\n", ","))
			end for
			if(i <> ^me.data - 1)
				do c :~ "|"
			end if
		end for
		ret c
	end func
	;LU分解
	+func LUDec(): []@Matrix
		if(^me.data <> ^me.data[0])
			do dbg@print("正方行列ではありません。")
			throw 0x00000003
		end if
		var temp: @Matrix :: ##me
		var L: @Matrix :: #@Matrix
		do L.new(#[^me.data, ^me.data]float)
		var U: @Matrix :: #@Matrix
		do U.newId(^me.data)
		var lu: @Matrix :: ##L
		for i(0, ^me.data - 1)
			var n: int :: ^me.data - i - 1
			do dbg@print("\{n}\n")
			do L.data[i][i] :: temp.data[0][0]
			var l0: float :: L.data[i][i]
			
			var u1: []float :: #[n]float
			for j(0, n - 1)
				do L.data[i + j + 1][i] :: temp.data[j + 1][0]
				do U.data[i][j + i + 1] :: temp.data[0][j + 1] / l0
				do u1[j] :: U.data[i][j + i + 1]
			end for
			
			for j(0, n - 1)
				for k(0, n - 1)
					do lu.data[j][k] :: temp.data[j + 1][0] * u1[k]
				end for
			end for
			if(n = 0)
				break i
			end if
			var A1: @Matrix :: #@Matrix
			do A1.new(#[n, n]float)
			for j(0, n - 1)
				for k(0, n - 1)
					do A1.data[j][k] :: temp.data[j + 1][k + 1] - lu.data[j][k]
				end for
			end for
			
			do temp :: A1
		end for
		var retMat: []@Matrix :: #[2]@Matrix
		do retMat[0] :: L
		do retMat[1] :: U
		ret retMat
	end func
end class

func checkShape(m1: &@Matrix, m2: &@Matrix)
	if(m1.shape()[0] <> m2.shape()[0] | m1.shape()[1] <> m2.shape()[1])
		do dbg@print("行または列の数が一致しません。")
		throw 0x00000002
	end if
end func

+func add(m1: &@Matrix, m2: &@Matrix): @Matrix
	do @checkShape(&m1, &m2)
	var temp: @Matrix :: ##m1
	for i(0, ^m1.data - 1)
		for j(0, ^m1.data[0] - 1)
			do temp.data[i][j] :+ m2.data[i][j]
		end for
	end for
	ret temp
end func

+func minus(m1: &@Matrix, m2: &@Matrix): @Matrix
	do @checkShape(&m1, &m2)
	var temp: @Matrix :: ##m1
	for i(0, ^m1.data - 1)
		for j(0, ^m1.data[0] - 1)
			do temp.data[i][j] :- m2.data[i][j]
		end for
	end for
	ret temp
end func

+func mul(m1: &@Matrix, m2: &@Matrix): @Matrix
	if(^m1.data[0] <> ^m2.data)
		do dbg@print("列と行が一致していません")
		throw 0x00000003
	end if
	var temp: @Matrix :: m2.trans()
	var mulMat: @Matrix :: #@Matrix
	do mulMat.new(#[^m1.data, ^m2.data[0]]float)
	for i(0, ^m1.data - 1)
		for j(0, ^mulMat.data[0] - 1)
			var t: float :: 0.0
			for k(0, ^m1.data[0] - 1)
				do t :+ (m1.data[i][k] * temp.data[j][k])
			end for
			do mulMat.data[i][j] :: t
		end for
	end for
	ret mulMat
end func
