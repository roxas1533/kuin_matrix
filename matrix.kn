+func makeMatrix(data: [][]float): @Matrix
	do @checkMat(&data)
	var makeMat: @Matrix :: #@Matrix
	do makeMat.data :: data
	ret makeMat
end func
;単位行列
+func makeIdentity(num: int): @Matrix
	var makeMat: @Matrix :: #@Matrix
	do makeMat.data :: #[num, num]float
	for i(0, num - 1)
		for j(0, num - 1)
			if(i = j)
				do makeMat.data[i][j] :: 1.0
			end if
		end for
	end for
	ret makeMat
end func
func makePermutation(sa: @Matrix, ta: @Matrix, num: int, replace: @Matrix, count: &int)
	var N: int :: ^sa.data[0]
	if(num = N + 1)
		do replace.data[count] :: ##ta.data[0]
		do count :+ 1
	else
		for i(1, N - num + 1)
			do ta.data[0][num - 1] :: sa.data[0][i - 1]
			var temp: @Matrix :: ##sa
			do sa.data[0][i - 1] :$ sa.data[0][N - num]
			do @makePermutation(sa, ta, num + 1, replace, &count)
			do sa :: temp
		end for
	end if
end func

+class Matrix()
	+var data: [][]float
	var maxlen: int
	*func ctor()
		do me.maxlen :: 1
	end func
	
	+func trans(): @Matrix
		var transM: [][]float :: #[^me.data[0], ^me.data]float
		for i(0, ^transM - 1)
			for j(0, ^transM[0] - 1)
				do transM[i][j] :: me.data[j][i]
			end for
		end for
		var transverse: @Matrix :: @makeMatrix(transM)
		ret transverse
	end func
	+func shape(): []int
		ret[^me.data, ^me.data[0]]
	end func
	+*func toStr(): []char
		var c: []char :: "|"
		for i(0, ^me.data - 1)
			for j(0, ^me.data[0] - 1)
				do me.maxlen :: (^me.data[i][j].toStr()) > me.maxlen ?(^me.data[i][j].toStr(), me.maxlen)
			end for
		end for
		for i(0, ^me.data - 1)
			for j(0, ^me.data[0] - 1)
				for(0, me.maxlen - ^me.data[i][j].toStr())
					do c :~ " "
				end for
				do c :~ me.data[i][j].toStr() ~ (j = ^me.data[0] - 1 ?("|\n", ","))
			end for
			if(i <> ^me.data - 1)
				do c :~ "|"
			end if
		end for
		ret c.trimRight()
	end func
	;LU分解
	+func LUDec(): []@Matrix
		do @checksq(&me, null)
		var temp: @Matrix :: ##me
		var L: @Matrix :: @makeMatrix(#[^me.data, ^me.data]float)
		var U: @Matrix :: @makeIdentity(^me.data)
		var lu: @Matrix :: ##L
		for i(0, ^me.data - 1)
			var n: int :: ^me.data - i - 1
			do L.data[i][i] :: temp.data[0][0]
			var l0: float :: L.data[i][i]
			
			var u1: []float :: #[n]float
			for j(0, n - 1)
				do L.data[i + j + 1][i] :: temp.data[j + 1][0]
				if(l0 = 0.0)
					do dbg@print("LU分解できない行列です。")
					throw 0x00000005
				end if
				do U.data[i][j + i + 1] :: temp.data[0][j + 1] / l0
				do u1[j] :: U.data[i][j + i + 1]
			end for
			
			
			for j(0, n - 1)
				for k(0, n - 1)
					do lu.data[j][k] :: temp.data[j + 1][0] * u1[k]
				end for
			end for
			if(n = 0)
				break i
			end if
			var A1: @Matrix :: @makeMatrix(#[n, n]float)
			for j(0, n - 1)
				for k(0, n - 1)
					do A1.data[j][k] :: temp.data[j + 1][k + 1] - lu.data[j][k]
				end for
			end for
			
			do temp :: A1
		end for
		var retMat: []@Matrix :: #[2]@Matrix
		do retMat[0] :: L
		do retMat[1] :: U
		ret retMat
	end func
	;行列式
	+func det(): float
		do @checksq(&me, null)
		try
			var LU: []@Matrix :: me.LUDec()
			var sigma: float :: 1.0
			for i(0, ^me.data - 1)
				do sigma :* LU[0].data[i][i]
			end for
			ret sigma
		catch 0x00000005
			var co: int :: 0
			var result: float :: 0.0
			var replace: @Matrix :: @makeMatrix(#[math@factInt(^me.data), ^me.data]float)
			do @makePermutation(@makeOrder(^me.data),
			|@makeMatrix(#[1, ^me.data]float), 1, replace, &co)
			var rep: []@Matrix :: #[math@factInt(^me.data)]@Matrix
			for i(0, math@factInt(^me.data) - 1)
				do rep[i] :: @makeMatrix([@makeOrder(^me.data).data[0], replace.data[i]])
				var allCount: int :: 0
				for j(0, ^me.data[0] - 1)
					var start: float :: rep[i].data[0][j]
					var s: float :: start
					var end1: float :: rep[i].data[1][j]
					var count: int :: 0
					while(s <> end1)
						if(end1 < s)
							skip j
						end if
						do start :: rep[i].data[0][end1 $ int - 1]
						do end1 :: rep[i].data[1][end1 $ int - 1]
						do count :+ 1
					end while
					do allCount :+ count
				end for
				var sign: int :: (-1) ^ allCount % 2
				var sigma: float :: 1.0
				for j(0, ^me.data[0] - 1)
					do sigma :* me.data[rep[i].data[0][j] $ int - 1][rep[i].data[1][j] $ int - 1]
				end for
				do sigma :* sign $ float
				do result :+ sigma
			end for
			ret result
		end try
	end func
	+func addLine(line: [][]float)
		do @checkMat(&line)
		if(^me.data[0] <> ^line[0])
			do dbg@print("列の数が一致しません。")
			throw 0x00000002
		end if
		do me.data :: me.data ~ line
	end func
	+func addCol(line: [][]float)
		do @checkMat(&line)
		if(^me.data <> ^line)
			do dbg@print("行の数が一致しません。")
			throw 0x00000002
		end if
		for i(0, ^me.data - 1)
			do me.data[i] :~ line[i]
		end for
	end func
	
	;列、行ベクトルを一次元配列に変換する
	+func VecToArray(): []float
		do @checkVec(&me, null)
		if(^me.data = 1)
			ret me.data[0]
		end if
		if(^me.data[0] = 1)
			ret me.trans().data[0]
		end if
	end func
end class

func makeOrder(n: int): @Matrix
	var f: []float :: #[n]float
	for i(0, n - 1)
		do f[i] :: (i + 1) $ float
	end for
	ret @makeMatrix([f])
end func
func checkVec(mat: &@Matrix, err: []char)
	if(^mat.data > 1 & ^mat.data[0] > 1)
		var text: []char :: (err =& null ?("", err)) ~ "列または行ベクトルではありません。"
		do dbg@print(text)
		throw 0x00000004
	end if
end func
func checksq(mat: &@Matrix, err: []char)
	if(^mat.data <> ^mat.data[0])
		var text: []char :: (err =& null ?("", err)) ~ "正方行列ではありません。"
		do dbg@print(text)
		throw 0x00000003
	end if
end func
func checkShape(m1: &@Matrix, m2: &@Matrix)
	if(m1.shape()[0] <> m2.shape()[0] | m1.shape()[1] <> m2.shape()[1])
		do dbg@print("行または列の数が一致しません。")
		throw 0x00000002
	end if
end func
func checkMat(data: &[][]float)
	var len: int :: ^data[0]
	for i(0, ^data - 1)
		if(^data = 0 | ^data[i] <> len)
			do dbg@print("行列になっていません。")
			throw 0x00000001
		end if
	end for
end func

+func add(m1: &@Matrix, m2: &@Matrix): @Matrix
	do @checkShape(&m1, &m2)
	var temp: @Matrix :: ##m1
	for i(0, ^m1.data - 1)
		for j(0, ^m1.data[0] - 1)
			do temp.data[i][j] :+ m2.data[i][j]
		end for
	end for
	ret temp
end func

+func minus(m1: &@Matrix, m2: &@Matrix): @Matrix
	do @checkShape(&m1, &m2)
	var temp: @Matrix :: ##m1
	for i(0, ^m1.data - 1)
		for j(0, ^m1.data[0] - 1)
			do temp.data[i][j] :- m2.data[i][j]
		end for
	end for
	ret temp
end func

+func mul(m1: &@Matrix, m2: &@Matrix): @Matrix
	if(^m1.data[0] <> ^m2.data)
		do dbg@print("列と行のサイズが一致していません")
		throw 0x00000003
	end if
	var temp: @Matrix :: m2.trans()
	var mulMat: @Matrix :: @makeMatrix(#[^m1.data, ^m2.data[0]]float)
	for i(0, ^m1.data - 1)
		for j(0, ^mulMat.data[0] - 1)
			var t: float :: 0.0
			for k(0, ^m1.data[0] - 1)
				do t :+ (m1.data[i][k] * temp.data[j][k])
			end for
			do mulMat.data[i][j] :: t
		end for
	end for
	ret mulMat
end func

+func solvEq(coefficient: &@Matrix, rvalue: &@Matrix): @Matrix
	do @checksq(&coefficient, "係数行列が")
	do @checkVec(&rvalue, "右辺値が")
	var L: @Matrix :: coefficient.LUDec()[0]
	var U: @Matrix :: coefficient.LUDec()[1]
	var y: []float :: #[^coefficient.data]float
	for i(0, ^coefficient.data - 1)
		var sum: float :: 0.0
		for k(0, i - 1, 1)
			do sum :+ L.data[i][k] * y[k]
		end for
		do y[i] :: (rvalue.VecToArray()[i] - sum) / L.data[i][i]
	end for
	
	var x: @Matrix :: @makeMatrix(#[^coefficient.data, 1]float)
	for i(^coefficient.data - 1, 0, -1)
		var sum: float :: 0.0
		for k(i + 1, ^coefficient.data - 1, 1)
			do sum :+ U.data[i][k] * x.data[k][0]
		end for
		do x.data[i][0] :: y[i] - sum
	end for
	ret x
end func
